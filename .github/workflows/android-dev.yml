name: Distribute APK App to Firebase App Distribution

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  repository_dispatch:
    types: ['distribute-apk']

jobs:
  deploy_to_app_distribution:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Check all required variables
      run: sh ./scripts/common-check.sh && sh ./scripts/android-dev-check.sh
      env:
        USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
        USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
        SSH_KNOWN_HOST: ${{ secrets.SSH_KNOWN_HOST }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        CURRENT_BRANCH: ${{ github.event.client_payload.branch }}
        REPO_URL: ${{ secrets.REPO_URL }}
        DATABASE_DEFAULT_ENCRYPTION_KEY: ${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}
        OAUTH_CLIENT_ID_ANDROID: ${{ secrets.OAUTH_CLIENT_ID_ANDROID }}
        APP_METRICA_API_KEY: ${{ secrets.APP_METRICA_API_KEY }}
        ENCRYPT_PASSWORD: ${{ secrets.ENCRYPT_PASSWORD }}
        FIREBASEAPPDISTRO_APP: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    - name: Fix error 'ENOSPC - System limit for number of file watchers reached'
      run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

    - name: Configure git users
      run: |
          git config --global user.name ${{ secrets.GITLAB_USER_NAME }}
          git config --global user.email ${{ secrets.GITLAB_USER_EMAIL }}

    - name: Setup SSH keys and known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SSH_KNOWN_HOST }} >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa

    - name: Get repository
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        rm -rf ./.git ./.github ./*
        ls -la ./
        git clone ${{ secrets.REPO_URL }} --branch=${{ github.event.client_payload.branch }} --single --depth=1 ./
        git log -1

    - name: Decrypt keystore and Google Credentials
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENCRYPT_PASSWORD }}" \
        --output ./android/keystores/release.keystore ./android/keystores/release.keystore.gpg
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENCRYPT_PASSWORD }}" \
        --output ./android/keystores/google-private-key.json ./android/keystores/google-private-key.json.gpg


    - name: Install Node.js 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x

    - name: Install Ruby 2.x
      uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.x'

    - name: Install Firebase
      run: |
        sudo curl -o "/usr/local/bin/firebase" -L --progress-bar "https://firebase.tools/bin/linux/latest"
        sudo chmod +rx "/usr/local/bin/firebase"

    - name: Restore Yarn v1 cache
      uses: actions/cache@v1
      with:
        path: /tmp/cache/yarn
        key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-v1-

    - name: Install packages
      run: yarn install --frozen-lockfile --cache-folder /tmp/cache/yarn

    - name: Restore ruby bundle cache
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install gem dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Restore Gradle cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-


    - name: Run fastlane line "fastlane android buildapk" with PROD ENV variables
      run: bundle exec fastlane android buildapk
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        DATABASE_DEFAULT_ENCRYPTION_KEY: ${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}
        OAUTH_CLIENT_ID_ANDROID: ${{ secrets.OAUTH_CLIENT_ID_ANDROID }}
        APP_METRICA_API_KEY: ${{ secrets.APP_METRICA_API_KEY }}
        FIREBASEAPPDISTRO_APP: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        CURRENT_BRANCH: ${{ github.event.client_payload.branch }}
