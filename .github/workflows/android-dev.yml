name: Distribute APK App to Firebase App Distribution

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  repository_dispatch:
    types: ["distribute-apk"]

jobs:
  distribute-apk:
    runs-on: ubuntu-20.04
    env:
      SENTRY_PROPERTIES: ./android/sentry.properties
      SENTRY_DIST: 0
      SENTRY_RELEASE: alpha
      SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      CURRENT_BRANCH: ${{ github.event.client_payload.branch }}
      GIT_LAB_COMMIT_SHA: ${{ github.event.client_payload.commit_sha }}
      GIT_LAB_PIPELINE_ID: ${{ github.event.client_payload.pipeline_id }}
      USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
      USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
      SSH_KNOWN_HOST: ${{ secrets.SSH_KNOWN_HOST }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      REPO_URL: ${{ secrets.REPO_URL }}
      ENCRYPT_PASSWORD: ${{ secrets.ENCRYPT_PASSWORD }}
      DATABASE_DEFAULT_ENCRYPTION_KEY: ${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}
      OAUTH_CLIENT_ID_ANDROID: ${{ secrets.OAUTH_CLIENT_ID_ANDROID_STAGING }}
      APP_METRICA_API_KEY: ${{ secrets.APP_METRICA_API_KEY_STAGING }}
      FIREBASEAPPDISTRO_APP: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      GIT_LAB_ACCESS_TOKEN: ${{ secrets.GIT_LAB_ACCESS_TOKEN }}
      OAUTH_CLIENT_ID_IOS: ${{ secrets.OAUTH_CLIENT_ID_IOS_STAGING }}
      AMPLITUDE_API_KEY: ${{ secrets.AMPLITUDE_API_KEY_STAGING }}
      REVENUECAT_API_KEY: ${{ secrets.REVENUECAT_API_KEY }}

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Fix "Installed Build Tools revision 31.0.0 is corrupted. Remove and install again using the SDK Manager."
      # See: https://stackoverflow.com/questions/68387270/android-studio-error-installed-build-tools-revision-31-0-0-is-corrupted
      - run: cd /usr/local/lib/android/sdk/build-tools/31.0.0 && mv d8 dx  && cd lib && mv d8.jar dx.jar
      - run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;21.1.6352462" --channel=0
      
      # Fix mmkv module build (need to be instaled only one ndk version)
      # Error: "No toolchains found in the NDK toolchains folder for ABI with prefix: arm-linux-androideabi"
      - run: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --uninstall "ndk;21.4.7075529"
      - run: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --uninstall "ndk;22.1.7171670"
      - run: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --uninstall "ndk;23.1.7779620"
      - run: ls -la /usr/local/lib/android/sdk/ndk

      - name: Check all required variables
        run: sh ./scripts/common-check.sh && sh ./scripts/android-dev-check.sh

      - name: Fix error 'ENOSPC - System limit for number of file watchers reached'
        run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

      - name: Configure git users
        run: |
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"

      - name: Setup SSH keys and known_hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan $SSH_KNOWN_HOST >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa

      - name: Get repository
        run: |
          rm -rf ./.git ./.github ./.gitignore ./*
          ls -la ./
          git clone "$REPO_URL" --branch="$CURRENT_BRANCH" --single --depth=1 ./
          git log -1

      - name: Notify gitlab
        run: ./infrastructure/gitlab/status.sh "state=running&description=$GITHUB_RUN_ID"

      - name: Decrypt keystore and Google Credentials
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPT_PASSWORD" \
          --output ./android/keystores/release.keystore ./android/keystores/release.keystore.gpg
          gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPT_PASSWORD" \
          --output ./android/keystores/google-private-key.json ./android/keystores/google-private-key.json.gpg

      - name: Install Firebase
        run: |
          sudo curl -o "/usr/local/bin/firebase" -L --progress-bar "https://firebase.tools/bin/linux/latest"
          sudo chmod +rx "/usr/local/bin/firebase"

      - uses: actions/cache@master
        id: yarn_cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - run: yarn install --frozen-lockfile
        if: steps.yarn_cache.outputs.cache-hit != 'true'

      - name: Install Ruby 2.x
        uses: actions/setup-ruby@v1
        with:
          ruby-version: "2.x"

#       - uses: actions/cache@master
#         id: ruby_cache
#         with:
#           path: vendor/bundle
#           key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}

      - run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        if: steps.ruby_cache.outputs.cache-hit != 'true'

      # Gradle Cache https://github.com/actions/cache/blob/main/examples.md#java---gradle
#       - uses: actions/cache@master
#         with:
#           path: |
#             ~/.gradle/caches
#             ~/.gradle/wrapper
#           key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
#           restore-keys: |
#             ${{ runner.os }}-gradle-

      # To fix mmkv module build error: "CMake 3.9.0 or higher is required.  You are running version 3.6.0-rc2"
      - name: Specify cmake version
        run: echo "cmake.dir=/usr/local/lib/android/sdk/cmake/3.10.2.4988404" >> android/local.properties

      - name: Run fastlane line "fastlane android distribute" with PROD ENV variables
        run: bundle exec fastlane android distribute

      - name: The job has cancelled
        if: ${{ cancelled() }}
        run: ./infrastructure/gitlab/status.sh "state=canceled"

      - name: The job has failed
        if: ${{ failure() }}
        run: ./infrastructure/gitlab/status.sh "state=failed"

      - name: The job has success
        run: ./infrastructure/gitlab/status.sh "state=success"
