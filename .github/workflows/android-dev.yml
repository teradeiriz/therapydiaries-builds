name: Distribute APK App to Firebase App Distribution

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch

on: push
# FIXME on:
#  repository_dispatch:
#    types: ['distribute-apk']

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Check all required variables
      run: sh ./scripts/check.sh
      env:
        USER_NAME: ${{ secrets.GITLAB_USER_NAME }}
        USER_EMAIL: ${{ secrets.GITLAB_USER_EMAIL }}
        SSH_KNOWN_HOST: ${{ secrets.SSH_KNOWN_HOST }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        CURRENT_BRANCH: develop
        REPO_NAME: ${{ secrets.REPO_NAME }}
        ENCRYPT_PASSWORD: ${{ secrets.ENCRYPT_PASSWORD }}
        DATABASE_DEFAULT_ENCRYPTION_KEY: ${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}
        OAUTH_CLIENT_ID_ANDROID: ${{ secrets.OAUTH_CLIENT_ID_ANDROID }}
        APP_METRICA_API_KEY: ${{ secrets.APP_METRICA_API_KEY }}
        FIREBASEAPPDISTRO_APP: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    - name: Fix error 'ENOSPC - System limit for number of file watchers reached'
      run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

    - name: Configure git users
      run: |
          git config --global user.name ${{ secrets.GITLAB_USER_NAME }}
          git config --global user.email ${{ secrets.GITLAB_USER_EMAIL }}

    - name: Setup SSH keys and known_hosts
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ secrets.SSH_KNOWN_HOST }} >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa

    - name: Get repository
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      run: |
        rm -rf .git
        git init
        git remote add origin ${{ secrets.REPO_URL }}
        git -c protocol.version=2 fetch --no-tags --prune --progress --no-recurse-submodules --depth=1 origin +54fdbb2c17c7b2793de613ad52ed9127b2523d53:refs/remotes/origin/develop
        git checkout --progress --force -B develop refs/remotes/origin/develop
        git log -1

    - name: Decrypt keystore and Google Credentials
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENCRYPT_PASSWORD }}" \
        --output ./android/keystores/release.keystore ./android/keystores/release.keystore.gpg
        gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.ENCRYPT_PASSWORD }}" \
        --output ./android/keystores/google-private-key.json ./android/keystores/google-private-key.json.gpg


    - uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.x'

    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Restore Yarn v1 cache
      uses: actions/cache@v1
      with:
        path: /tmp/cache/yarn
        key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-v1-

    - name: Install packages
      run: yarn install --frozen-lockfile --cache-folder /tmp/cache/yarn

#    - name: Install Firebase
#      run: |
#        curl -sL https://firebase.tools | bash
#        which firebase
#      env:
#        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
#      shell: bash

    - name: Restore Ruby cache
      uses: actions/cache@v1
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install Fastlane
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    - name: Restore Gradle cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Install firebase
      run: |
        sudo curl -o "/usr/local/bin/firebase" -L --progress-bar "https://firebase.tools/bin/linux/latest"
        sudo chmod +rx "/usr/local/bin/firebase"

    - name: Run fastlane line "fastlane android buildapk" with PROD ENV variables
      run: bundle exec fastlane android buildapk
      env:
        SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        DATABASE_DEFAULT_ENCRYPTION_KEY: ${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}
        OAUTH_CLIENT_ID_ANDROID: ${{ secrets.OAUTH_CLIENT_ID_ANDROID }}
        APP_METRICA_API_KEY: ${{ secrets.APP_METRICA_API_KEY }}
        FIREBASEAPPDISTRO_APP: ${{ secrets.FIREBASE_APP_ID_ANDROID }}
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        CURRENT_BRANCH: develop
