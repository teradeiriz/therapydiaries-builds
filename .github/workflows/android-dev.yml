name: Distribute APK App to Firebase App Distribution

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  repository_dispatch:
    types: ['distribute-apk']

jobs:
  distribute-apk:
    runs-on: ubuntu-latest

    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # https://help.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-environment-variable
    # OAUTH_CLIENT_ID_IOS is needed for checks in frontend part of the code
    - name: Set environment variables that would be available between all jobs
      run: |
        echo "::set-env name=SSH_AUTH_SOCK::/tmp/ssh_agent.sock"
        echo "::set-env name=USER_NAME::${{ secrets.GITLAB_USER_NAME }}"
        echo "::set-env name=USER_EMAIL::${{ secrets.GITLAB_USER_EMAIL }}"
        echo "::set-env name=SSH_KNOWN_HOST::${{ secrets.SSH_KNOWN_HOST }}"
        echo "::set-env name=SSH_PRIVATE_KEY::${{ secrets.SSH_PRIVATE_KEY }}"
        echo "::set-env name=CURRENT_BRANCH::${{ github.event.client_payload.branch }}"
        echo "::set-env name=GIT_LAB_COMMIT_SHA::${{ github.event.client_payload.commit_sha }}"
        echo "::set-env name=GIT_LAB_PIPELINE_ID::${{ github.event.client_payload.pipeline_id }}"
        echo "::set-env name=REPO_URL::${{ secrets.REPO_URL }}"
        echo "::set-env name=ENCRYPT_PASSWORD::${{ secrets.ENCRYPT_PASSWORD }}"
        echo "::set-env name=DATABASE_DEFAULT_ENCRYPTION_KEY::${{ secrets.DATABASE_DEFAULT_ENCRYPTION_KEY }}"
        echo "::set-env name=OAUTH_CLIENT_ID_ANDROID::${{ secrets.OAUTH_CLIENT_ID_ANDROID_STAGING }}"
        echo "::set-env name=APP_METRICA_API_KEY::${{ secrets.APP_METRICA_API_KEY_STAGING }}"
        echo "::set-env name=FIREBASEAPPDISTRO_APP::${{ secrets.FIREBASE_APP_ID_ANDROID }}"
        echo "::set-env name=FIREBASE_TOKEN::${{ secrets.FIREBASE_TOKEN }}"
        echo "::set-env name=GIT_LAB_ACCESS_TOKEN::${{ secrets.GIT_LAB_ACCESS_TOKEN }}"
        echo "::set-env name=OAUTH_CLIENT_ID_IOS::${{ secrets.OAUTH_CLIENT_ID_IOS_STAGING }}"

    - name: Check all required variables
      run: sh ./scripts/common-check.sh && sh ./scripts/android-dev-check.sh

    - name: Fix error 'ENOSPC - System limit for number of file watchers reached'
      run: echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p

    - name: Configure git users
      run: |
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"

    - name: Setup SSH keys and known_hosts
      run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan $SSH_KNOWN_HOST >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add ~/.ssh/id_rsa

    - name: Get repository
      run: |
        rm -rf ./.git ./.github ./.gitignore ./*
        ls -la ./
        git clone "$REPO_URL" --branch="$CURRENT_BRANCH" --single --depth=1 ./
        git log -1

    - name: Notify gitlab
      run: ./infrastructure/gitlab/status.sh "state=running&description=$GITHUB_RUN_ID"

    - name: Decrypt keystore and Google Credentials
      run: |
        gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPT_PASSWORD" \
        --output ./android/keystores/release.keystore ./android/keystores/release.keystore.gpg
        gpg --quiet --batch --yes --decrypt --passphrase="$ENCRYPT_PASSWORD" \
        --output ./android/keystores/google-private-key.json ./android/keystores/google-private-key.json.gpg


    - name: Install Firebase
      run: |
        sudo curl -o "/usr/local/bin/firebase" -L --progress-bar "https://firebase.tools/bin/linux/latest"
        sudo chmod +rx "/usr/local/bin/firebase"

    # Yarn Cache: https://github.com/actions/cache/blob/master/examples.md#node---yarn
    - uses: actions/cache@master
      with:
        path: node_modules
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Install packages
      run: yarn install --frozen-lockfile

    - name: Install Ruby 2.x
      uses: actions/setup-ruby@v1
      with:
        ruby-version: '2.x'

    # https://github.com/actions/cache/blob/main/examples.md#ruby---bundler
    - uses: actions/cache@master
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Install gem dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3

    # Gradle Cache https://github.com/actions/cache/blob/main/examples.md#java---gradle
    - uses: actions/cache@master
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Run fastlane line "fastlane android distribute" with PROD ENV variables
      run: bundle exec fastlane android distribute

    - name: The job has cancelled
      if: ${{ cancelled() }}
      run: ./infrastructure/gitlab/status.sh "state=canceled"

    - name: The job has failed
      if: ${{ failure() }}
      run: ./infrastructure/gitlab/status.sh "state=failed"

    - name: The job has success
      run: ./infrastructure/gitlab/status.sh "state=success"
